// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddNumServiceClient is the client API for AddNumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddNumServiceClient interface {
	AddNum(ctx context.Context, in *AddNumParams, opts ...grpc.CallOption) (*TotalNum, error)
	GetTotalNum(ctx context.Context, in *GetTotalNumParams, opts ...grpc.CallOption) (*TotalNum, error)
}

type addNumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddNumServiceClient(cc grpc.ClientConnInterface) AddNumServiceClient {
	return &addNumServiceClient{cc}
}

func (c *addNumServiceClient) AddNum(ctx context.Context, in *AddNumParams, opts ...grpc.CallOption) (*TotalNum, error) {
	out := new(TotalNum)
	err := c.cc.Invoke(ctx, "/proto.addNumService/addNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addNumServiceClient) GetTotalNum(ctx context.Context, in *GetTotalNumParams, opts ...grpc.CallOption) (*TotalNum, error) {
	out := new(TotalNum)
	err := c.cc.Invoke(ctx, "/proto.addNumService/getTotalNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddNumServiceServer is the server API for AddNumService service.
// All implementations should embed UnimplementedAddNumServiceServer
// for forward compatibility
type AddNumServiceServer interface {
	AddNum(context.Context, *AddNumParams) (*TotalNum, error)
	GetTotalNum(context.Context, *GetTotalNumParams) (*TotalNum, error)
}

// UnimplementedAddNumServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAddNumServiceServer struct {
}

func (UnimplementedAddNumServiceServer) AddNum(context.Context, *AddNumParams) (*TotalNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNum not implemented")
}
func (UnimplementedAddNumServiceServer) GetTotalNum(context.Context, *GetTotalNumParams) (*TotalNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNum not implemented")
}

// UnsafeAddNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddNumServiceServer will
// result in compilation errors.
type UnsafeAddNumServiceServer interface {
	mustEmbedUnimplementedAddNumServiceServer()
}

func RegisterAddNumServiceServer(s grpc.ServiceRegistrar, srv AddNumServiceServer) {
	s.RegisterService(&AddNumService_ServiceDesc, srv)
}

func _AddNumService_AddNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNumParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddNumServiceServer).AddNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.addNumService/addNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddNumServiceServer).AddNum(ctx, req.(*AddNumParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddNumService_GetTotalNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalNumParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddNumServiceServer).GetTotalNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.addNumService/getTotalNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddNumServiceServer).GetTotalNum(ctx, req.(*GetTotalNumParams))
	}
	return interceptor(ctx, in, info, handler)
}

// AddNumService_ServiceDesc is the grpc.ServiceDesc for AddNumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddNumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.addNumService",
	HandlerType: (*AddNumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addNum",
			Handler:    _AddNumService_AddNum_Handler,
		},
		{
			MethodName: "getTotalNum",
			Handler:    _AddNumService_GetTotalNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "count.proto",
}
